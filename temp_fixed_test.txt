    [Fact]
    public void GetFileNameShouldHandleConfigurationWithoutIdProperty()
    {
        // Arrange - Create a configuration type without Id property
        var configWithoutId = new ConfigurationWithoutId { Name = "Test Config" };

        // Act - Use reflection to test private generic method GetFileName(TConfiguration)
        var methods = typeof(JsonConfigurationSource).GetMethods(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static)
            .Where(m => m.Name == "GetFileName" && m.IsGenericMethodDefinition)
            .ToArray();
        
        // Find the method that takes TConfiguration parameter (not int)
        var configMethod = methods.FirstOrDefault(m => m.GetParameters().Length == 1 && 
            m.GetParameters()[0].ParameterType.IsGenericParameter);
        configMethod.ShouldNotBeNull();
        
        var genericMethod = configMethod.MakeGenericMethod(typeof(ConfigurationWithoutId));
        var fileName = (string)genericMethod.Invoke(null, new object[] { configWithoutId })!;

        // Assert - Should use default id of 0 when no Id property found
        fileName.ShouldBe("ConfigurationWithoutId_0.json");
        
        _output.WriteLine($"GetFileName with configuration without Id property returned: {fileName}");
    }
